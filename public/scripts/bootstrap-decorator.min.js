

angular.module("schemaForm").run(["$templateCache", "$http", function ($templateCache, $http) {
        $templateCache.put("decorators/bootstrap/actions-trcl.html", "<div class=\"btn-group schema-form-actions {{form.htmlClass}}\" ng-transclude=\"\"></div>");
        $templateCache.put("decorators/bootstrap/actions.html", "<div class=\"btn-group schema-form-actions {{form.htmlClass}}\"><input ng-repeat-start=\"item in form.items\" type=\"submit\" class=\"btn {{ item.style || \'btn-default\' }} {{form.fieldHtmlClass}}\" value=\"{{item.title}}\" ng-if=\"item.type === \'submit\'\"> <button ng-repeat-end=\"\" class=\"btn {{ item.style || \'btn-default\' }} {{form.fieldHtmlClass}}\" type=\"button\" ng-disabled=\"form.readonly\" ng-if=\"item.type !== \'submit\'\" ng-click=\"buttonClick($event,item)\"><span ng-if=\"item.icon\" class=\"{{item.icon}}\"></span>{{item.title}}</button></div>");
        $templateCache.put("decorators/bootstrap/array.html", "<div class=\"schema-form-array\" sf-field-model=\"sf-new-array\" sf-new-array=\"\" class=\"{{form.fieldHtmlClass}}\"><label class=\"control-label\" ng-show=\"showTitle()\">{{ form.title }}</label><ol class=\"list-group\" sf-field-model=\"\" ui-sortable=\"form.sortOptions\">111111$$value$$<li class=\"list-group-item {{form.fieldHtmlClass}}\" schema-form-array-items=\"\" sf-field-model=\"ng-repeat\" ng-repeat=\"item in $$value$$ track by $index\"><button ng-hide=\"form.readonly || form.remove === null\" ng-click=\"deleteFromArray($index)\" ng-disabled=\"form.schema.minItems >= modelArray.length\" style=\"position: relative; z-index: 20;\" type=\"button\" class=\"close pull-right\"><span aria-hidden=\"true\">&times;</span><span class=\"sr-only\">Close</span></button></li></ol><div class=\"clearfix\" style=\"padding: 15px;\" ng-model=\"modelArray\" schema-validate=\"form\"><div class=\"help-block\" ng-show=\"(hasError() && errorMessage(schemaError())) || form.description\" ng-bind-html=\"(hasError() && errorMessage(schemaError())) || form.description\"></div><button ng-hide=\"form.readonly || form.add === null\" ng-click=\"appendToArray()\" ng-disabled=\"form.schema.maxItems <= modelArray.length\" type=\"button\" class=\"btn {{ form.style.add || \'btn-default\' }} pull-right\"><i class=\"glyphicon glyphicon-plus\"></i> {{ form.add || \'Add\'}}</button></div></div>");
        $templateCache.put("decorators/bootstrap/grid.html", "<div class=\"{{form.fieldHtmlClass}} \">" + 
            "<label class=\"control-label\" ng-show=\"showTitle()\">{{ form.title }}</label>" + 
            "<div sf-field-model=\"\" schema-form-array  sf-field-value=\"replaceAll\" sf-array=\"form\" ng-model=\"$$value$$\">" + 
            "<div ng-model=\"modelArray\" grid-directive ag-grid=\"gridOptions\" class=\"ag-blue\"> " + 
            "<div ag-grid=\"gridOptions\" class=\"ag-blue\"></div></div></div>" + 
            "<div class=\"clearfix\" style=\"padding: 15px;\" ng-model=\"modelArray\" schema-validate=\"form\"><div class=\"help-block\" ng-show=\"(hasError() && errorMessage(schemaError())) || form.description\" ng-bind-html=\"(hasError() && errorMessage(schemaError())) || form.description\"></div><button ng-hide=\"form.readonly || form.add === null\" ng-click=\"appendToArray()\" ng-disabled=\"form.schema.maxItems <= modelArray.length\" type=\"button\" class=\"btn {{ form.style.add || \'btn-default\' }} pull-right\"><i class=\"glyphicon glyphicon-plus\"></i> {{ form.add || \'Add\'}}</button></div></div>");
        
        $http.get("modules/schemas/decorators/bootstrap/table.html").then(function (response) { $templateCache.put("decorators/bootstrap/table.html", response.data); });
         $http.get("modules/schemas/decorators/ckeditor/ckeditor.html").then(function (response) { $templateCache.put("decorators/ckeditor/ckeditor.html", response.data); });
        
      

        $templateCache.put("decorators/bootstrap/checkbox.html", "<div class=\"checkbox schema-form-checkbox {{form.htmlClass}}\" ng-class=\"{\'has-error\': form.disableErrorState !== true && hasError(), \'has-success\': form.disableSuccessState !== true && hasSuccess()}\"><label class=\"{{form.labelHtmlClass}}\"><input type=\"checkbox\" sf-changed=\"form\" ng-disabled=\"form.readonly\" sf-field-model=\"\" schema-validate=\"form\" class=\"{{form.fieldHtmlClass}} \" name=\"{{form.key.slice(-1)[0]}}\"> <span ng-bind-html=\"form.title\"></span></label><div class=\"help-block\" sf-message=\"form.description\"></div></div>");
        $templateCache.put("decorators/bootstrap/checkboxes.html", "<div sf-field-model=\"sf-new-array\" sf-new-array=\"\" class=\"form-group schema-form-checkboxes {{form.htmlClass}}\" ng-class=\"{\'has-error\': form.disableErrorState !== true && hasError(), \'has-success\': form.disableSuccessState !== true && hasSuccess()}\"><label class=\"control-label {{form.labelHtmlClass}}\" sf-field-model=\"\" schema-validate=\"form\" ng-show=\"showTitle()\">{{form.title}}</label><div class=\"checkbox\" ng-repeat=\"val in titleMapValues track by $index\"><label><input type=\"checkbox\" ng-disabled=\"form.readonly\" sf-changed=\"form\" class=\"{{form.fieldHtmlClass}}\" ng-model=\"titleMapValues[$index]\" name=\"{{form.key.slice(-1)[0]}}\"> <span ng-bind-html=\"form.titleMap[$index].name\"></span></label></div><div class=\"help-block\" sf-message=\"form.description\"></div></div>");
        $templateCache.put("decorators/bootstrap/default.html", "<div class=\"form-group schema-form-{{form.type}} {{form.htmlClass}}\" ng-class=\"{\'has-error\': form.disableErrorState !== true && hasError(), \'has-success\': form.disableSuccessState !== true && hasSuccess(), \'has-feedback\': form.feedback !== false }\"><label class=\"control-label {{form.labelHtmlClass}}\" ng-class=\"{\'sr-only\': !showTitle()}\" for=\"{{form.key.slice(-1)[0]}}\">{{form.title}}</label> <input ng-if=\"!form.fieldAddonLeft && !form.fieldAddonRight\" ng-show=\"form.key\" type=\"{{form.type}}\" step=\"any\" sf-changed=\"form\" placeholder=\"{{form.placeholder}}\" class=\"form-control {{form.fieldHtmlClass}}\" id=\"{{form.key.slice(-1)[0]}}\" sf-field-model=\"\" ng-disabled=\"form.readonly\" schema-validate=\"form\" name=\"{{form.key.slice(-1)[0]}}\" aria-describedby=\"{{form.key.slice(-1)[0] + \'Status\'}}\"><div ng-if=\"form.fieldAddonLeft || form.fieldAddonRight\" ng-class=\"{\'input-group\': (form.fieldAddonLeft || form.fieldAddonRight)}\"><span ng-if=\"form.fieldAddonLeft\" class=\"input-group-addon\" ng-bind-html=\"form.fieldAddonLeft\"></span> <input ng-show=\"form.key\" type=\"{{form.type}}\" step=\"any\" sf-changed=\"form\" placeholder=\"{{form.placeholder}}\" class=\"form-control {{form.fieldHtmlClass}}\" id=\"{{form.key.slice(-1)[0]}}\" sf-field-model=\"\" ng-disabled=\"form.readonly\" schema-validate=\"form\" name=\"{{form.key.slice(-1)[0]}}\" aria-describedby=\"{{form.key.slice(-1)[0] + \'Status\'}}\"> <span ng-if=\"form.fieldAddonRight\" class=\"input-group-addon\" ng-bind-html=\"form.fieldAddonRight\"></span></div><span ng-if=\"form.feedback !== false\" class=\"form-control-feedback\" ng-class=\"evalInScope(form.feedback) || {\'glyphicon\': true, \'glyphicon-ok\': hasSuccess(), \'glyphicon-remove\': hasError() }\" aria-hidden=\"true\"></span> <span ng-if=\"hasError() || hasSuccess()\" id=\"{{form.key.slice(-1)[0] + \'Status\'}}\" class=\"sr-only\">{{ hasSuccess() ? \'(success)\' : \'(error)\' }}</span><div class=\"help-block\" sf-message=\"form.description\"></div></div>");
        $templateCache.put("decorators/bootstrap/fieldset.html", "<fieldset ng-disabled=\"form.readonly\" class=\"schema-form-fieldset {{form.htmlClass}}\"><legend ng-class=\"{\'sr-only\': !showTitle() }\">{{ form.title }}</legend><div class=\"help-block\" ng-show=\"form.description\" ng-bind-html=\"form.description\"></div></fieldset>");
        $templateCache.put("decorators/bootstrap/help.html", "<div class=\"helpvalue schema-form-helpvalue {{form.htmlClass}}\" ng-bind-html=\"form.helpvalue\"></div>");
        $templateCache.put("decorators/bootstrap/radio-buttons.html", "<div class=\"form-group schema-form-radiobuttons {{form.htmlClass}}\" ng-class=\"{\'has-error\': form.disableErrorState !== true && hasError(), \'has-success\': form.disableSuccessState !== true && hasSuccess()}\"><div><label class=\"control-label {{form.labelHtmlClass}}\" ng-show=\"showTitle()\">{{form.title}}</label></div><div class=\"btn-group\"><label sf-field-model=\"replaceAll\" class=\"btn {{ (item.value === $$value$$) ? form.style.selected || \'btn-default\' : form.style.unselected || \'btn-default\'; }}\" ng-class=\"{ active: item.value === $$value$$ }\" ng-repeat=\"item in form.titleMap\">" + "<input type=\"radio\" class=\"{{form.fieldHtmlClass}}\" sf-changed=\"form\" style=\"display: none;\" ng-disabled=\"form.readonly\" sf-field-model=\"\" schema-validate=\"form\" ng-value=\"item.value\" name=\"{{form.key.join(\'.\')}}\"> <span ng-bind-html=\"item.name\"></span></label></div><div class=\"help-block\" sf-message=\"form.description\"></div></div>");
        $templateCache.put("decorators/bootstrap/radios-inline.html", "<div class=\"form-group schema-form-radios-inline {{form.htmlClass}}\" ng-class=\"{\'has-error\': form.disableErrorState !== true && hasError(), \'has-success\': form.disableSuccessState !== true && hasSuccess()}\"><label class=\"control-label {{form.labelHtmlClass}}\" ng-show=\"showTitle()\" sf-field-model=\"\" schema-validate=\"form\">{{form.title}}</label><div><label class=\"radio-inline\" ng-repeat=\"item in form.titleMap\"><input type=\"radio\" class=\"{{form.fieldHtmlClass}}\" sf-changed=\"form\" ng-disabled=\"form.readonly\" sf-field-model=\"\" ng-value=\"item.value\" name=\"{{form.key.join(\'.\')}}\"> <span ng-bind-html=\"item.name\"></span></label></div><div class=\"help-block\" sf-message=\"form.description\"></div></div>");
        $templateCache.put("decorators/bootstrap/radios.html", "<div class=\"form-group schema-form-radios {{form.htmlClass}}\" ng-class=\"{\'has-error\': form.disableErrorState !== true && hasError(), \'has-success\': form.disableSuccessState !== true && hasSuccess()}\"><label class=\"control-label {{form.labelHtmlClass}}\" sf-field-model=\"\" schema-validate=\"form\" ng-show=\"showTitle()\">{{form.title}} </label><div class=\"radio\" ng-repeat=\"item in form.titleMap\"><label>" +
			"<input type=\"radio\" class=\"{{form.fieldHtmlClass}}\" sf-changed=\"form\" ng-disabled=\"form.readonly\" sf-field-model=\"\" ng-value=\"item.value\" name=\"{{form.key.join(\'.\')}}\"> <span ng-bind-html=\"item.name\"></span></label></div><div class=\"help-block\" sf-message=\"form.description\"></div></div>");
        $templateCache.put("decorators/bootstrap/section.html", "<div class=\"schema-form-section {{form.htmlClass}}\"></div>");
        $templateCache.put("decorators/bootstrap/selectObj.html", 
            "<div class=\"form-group {{form.htmlClass}} schema-form-select\" ng-class=\"{\'has-error\': form.disableErrorState !== true && hasError(), \'has-success\': form.disableSuccessState !== true && hasSuccess(), \'has-feedback\': form.feedback !== false}\"><label class=\"control-label {{form.labelHtmlClass}}\" ng-show=\"showTitle()\">{{form.title}}</label><select sf-field-model=\"\" ng-disabled=\"form.readonly\" sf-changed=\"form\" class=\"form-control {{form.fieldHtmlClass}}\" schema-validate=\"form\" " + 
            " ng-options=\"item as item.Name for item in form.titleMap track by item._id\" name=\"{{form.key.slice(-1)[0]}}\"></select><div class=\"help-block\" sf-message=\"form.description\"></div></div>");
        $templateCache.put("decorators/bootstrap/select.html", 
            "<div class=\"form-group {{form.htmlClass}} schema-form-select\" ng-class=\"{\'has-error\': form.disableErrorState !== true && hasError(), \'has-success\': form.disableSuccessState !== true && hasSuccess(), \'has-feedback\': form.feedback !== false}\"><label class=\"control-label {{form.labelHtmlClass}}\" ng-show=\"showTitle()\">{{form.title}}</label>{{model['PlaceHolder']}}<select sf-field-model=\"\" ng-disabled=\"form.readonly\" sf-changed=\"form\"" + 
			"class=\"form-control {{form.fieldHtmlClass}}\" schema-validate=\"form\" ng-options=\"item.value as item.name   for item in form.titleMap | orderBy: 'name' \" name=\"{{form.key.slice(-1)[0]}}\"></select><div class=\"help-block\" sf-message=\"form.description\"></div></div>");
        $templateCache.put("decorators/bootstrap/submit.html", "<div class=\"form-group schema-form-submit {{form.htmlClass}}\"><input type=\"submit\" class=\"btn {{ form.style || \'btn-primary\' }} {{form.fieldHtmlClass}}\" value=\"{{form.title}}\" ng-disabled=\"form.readonly\" ng-if=\"form.type === \'submit\'\"> <button class=\"btn {{ form.style || \'btn-default\' }}\" type=\"button\" ng-click=\"buttonClick($event,form)\" ng-disabled=\"form.readonly\" ng-if=\"form.type !== \'submit\'\"><span ng-if=\"form.icon\" class=\"{{form.icon}}\"></span> {{form.title}}</button></div>");
        $templateCache.put("decorators/bootstrap/tabarray.html", "<div ng-init=\"selected = { tab: 0 }\" ng-model=\"modelArray\" schema-validate=\"form\" sf-field-model=\"sf-new-array\" sf-new-array=\"\" class=\"clearfix schema-form-tabarray schema-form-tabarray-{{form.tabType || \'left\'}} {{form.htmlClass}}\"><div ng-if=\"!form.tabType || form.tabType !== \'right\'\" ng-class=\"{\'col-xs-3\': !form.tabType || form.tabType === \'left\'}\"><ul class=\"nav nav-tabs\" ng-class=\"{ \'tabs-left\': !form.tabType || form.tabType === \'left\'}\"><li sf-field-model=\"ng-repeat\" ng-repeat=\"item in $$value$$ track by $index\" ng-click=\"$event.preventDefault() || (selected.tab = $index)\" ng-class=\"{active: selected.tab === $index}\"><a href=\"#\">{{interp(form.title,{\'$index\':$index, value: item}) || $index}}</a></li><li ng-hide=\"form.readonly\" ng-disabled=\"form.schema.maxItems <= modelArray.length\" ng-click=\"$event.preventDefault() || (selected.tab = appendToArray().length - 1)\"><a href=\"#\"><i class=\"glyphicon glyphicon-plus\"></i> {{ form.add || \'Add\'}}</a></li></ul></div><div ng-class=\"{\'col-xs-9\': !form.tabType || form.tabType === \'left\' || form.tabType === \'right\'}\"><div class=\"tab-content {{form.fieldHtmlClass}}\"><div class=\"tab-pane clearfix tab{{selected.tab}} index{{$index}}\" sf-field-model=\"ng-repeat\" ng-repeat=\"item in $$value$$ track by $index\" ng-show=\"selected.tab === $index\" ng-class=\"{active: selected.tab === $index}\"><div schema-form-array-items=\"\"></div><button ng-hide=\"form.readonly\" ng-click=\"selected.tab = deleteFromArray($index).length - 1\" ng-disabled=\"form.schema.minItems >= modelArray.length\" type=\"button\" class=\"btn {{ form.style.remove || \'btn-default\' }} pull-right\"><i class=\"glyphicon glyphicon-trash\"></i> {{ form.remove || \'Remove\'}}</button></div><div class=\"help-block\" ng-show=\"(hasError() && errorMessage(schemaError())) || form.description\" ng-bind-html=\"(hasError() && errorMessage(schemaError())) || form.description\"></div></div></div></div><div ng-if=\"form.tabType === \'right\'\" class=\"col-xs-3\"><ul class=\"nav nav-tabs tabs-right\"><li sf-field-model=\"ng-repeat\" ng-repeat=\"item in $$value$$ track by $index\" ng-click=\"$event.preventDefault() || (selected.tab = $index)\" ng-class=\"{active: selected.tab === $index}\"><a href=\"#\">{{interp(form.title,{\'$index\':$index, value: item}) || $index}}</a></li><li ng-hide=\"form.readonly\" ng-disabled=\"form.schema.maxItems <= modelArray.length\" ng-click=\"$event.preventDefault() || (selected.tab = appendToArray().length - 1)\"><a href=\"#\"><i class=\"glyphicon glyphicon-plus\"></i> {{ form.add || \'Add\'}}</a></li></ul></div>");
        $templateCache.put("decorators/bootstrap/tabs.html", "<div ng-init=\"selected = { tab: 0 }\" class=\"schema-form-tabs {{form.htmlClass}}\"><ul class=\"nav nav-tabs\"><li ng-repeat=\"tab in form.tabs\" ng-disabled=\"form.readonly\" ng-click=\"$event.preventDefault() || (selected.tab = $index)\" ng-class=\"{active: selected.tab === $index}\"><a href=\"#\">{{ tab.title }}</a></li></ul><div class=\"tab-content {{form.fieldHtmlClass}}\"></div></div>");
        $templateCache.put("decorators/bootstrap/textarea.html", "<div class=\"form-group has-feedback {{form.htmlClass}} schema-form-textarea\" ng-class=\"{\'has-error\': form.disableErrorState !== true && hasError(), \'has-success\': form.disableSuccessState !== true && hasSuccess()}\"><label class=\"control-label {{form.labelHtmlClass}}\" ng-class=\"{\'sr-only\': !showTitle()}\" for=\"{{form.key.slice(-1)[0]}}\">{{form.title}}</label> <textarea ng-if=\"!form.fieldAddonLeft && !form.fieldAddonRight\" class=\"form-control {{form.fieldHtmlClass}}\" id=\"{{form.key.slice(-1)[0]}}\" sf-changed=\"form\" placeholder=\"{{form.placeholder}}\" ng-disabled=\"form.readonly\" sf-field-model=\"\" schema-validate=\"form\" name=\"{{form.key.slice(-1)[0]}}\"></textarea><div ng-if=\"form.fieldAddonLeft || form.fieldAddonRight\" ng-class=\"{\'input-group\': (form.fieldAddonLeft || form.fieldAddonRight)}\"><span ng-if=\"form.fieldAddonLeft\" class=\"input-group-addon\" ng-bind-html=\"form.fieldAddonLeft\"></span> <textarea class=\"form-control {{form.fieldHtmlClass}}\" id=\"{{form.key.slice(-1)[0]}}\" sf-changed=\"form\" placeholder=\"{{form.placeholder}}\" ng-disabled=\"form.readonly\" sf-field-model=\"\" schema-validate=\"form\" name=\"{{form.key.slice(-1)[0]}}\"></textarea> <span ng-if=\"form.fieldAddonRight\" class=\"input-group-addon\" ng-bind-html=\"form.fieldAddonRight\"></span></div><span class=\"help-block\" sf-message=\"form.description\"></span></div>");
        
        $templateCache.put("decorators/bootstrap/datepicker.html", "<div class=\"form-group schema-form-datepicker {{form.htmlClass}}\" ng-class=\"{\'has-error\': form.disableErrorState !== true && hasError(), \'has-success\': form.disableSuccessState !== true && hasSuccess(), \'has-feedback\': form.feedback !== false }\"><label class=\"control-label {{form.labelHtmlClass}}\" ng-class=\"{\'sr-only\': !showTitle()}\" for=\"{{form.key.slice(-1)[0]}}\">{{form.title}}</label>" + 
        "<div class=\"input-group\">{{$$value$$}}<input ng-model=\"$$value$$\" ng-show=\"!form.fieldAddonLeft && !form.fieldAddonRight\" ng-show=\"form.key\" type=\"{{form.type}}\" step=\"any\" sf-changed=\"form\" placeholder=\"{{form.placeholder}}\" class=\"form-control {{form.fieldHtmlClass}}\" id=\"{{form.key.slice(-1)[0]}}\" sf-field-model=\"\" ng-disabled=\"form.readonly\" schema-validate=\"form\" name=\"{{form.key.slice(-1)[0]}}\" aria-describedby=\"{{form.key.slice(-1)[0] + \'Status\'}}\" " +
        "    uib-datepicker-popup=\"{{form.dateFormat}}\"    is-open=\"showpicker\" schema-validate=\"form\">    <span class=\"input-group-btn\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"showpicker = !showpicker\"><i class=\"glyphicon glyphicon-calendar\"></i></button></span></div> <div ng-if=\"form.fieldAddonLeft || form.fieldAddonRight\" ng-class=\"{\'input-group\': (form.fieldAddonLeft || form.fieldAddonRight)}\"><span ng-if=\"form.fieldAddonLeft\" class=\"input-group-addon\" ng-bind-html=\"form.fieldAddonLeft\"></span> <input ng-show=\"form.key\" type=\"{{form.type}}\" step=\"any\" sf-changed=\"form\" placeholder=\"{{form.placeholder}}\" class=\"form-control {{form.fieldHtmlClass}}\" id=\"{{form.key.slice(-1)[0]}}\" sf-field-model=\"\" ng-disabled=\"form.readonly\" schema-validate=\"form\" name=\"{{form.key.slice(-1)[0]}}\" aria-describedby=\"{{form.key.slice(-1)[0] + \'Status\'}}\"> <span ng-if=\"form.fieldAddonRight\" class=\"input-group-addon\" ng-bind-html=\"form.fieldAddonRight\"></span></div><span ng-if=\"form.feedback !== false\" class=\"form-control-feedback\" ng-class=\"evalInScope(form.feedback) || {\'glyphicon\': true, \'glyphicon-ok\': hasSuccess(), \'glyphicon-remove\': hasError() }\" aria-hidden=\"true\"></span> <span ng-if=\"hasError() || hasSuccess()\" id=\"{{form.key.slice(-1)[0] + \'Status\'}}\" class=\"sr-only\">{{ hasSuccess() ? \'(success)\' : \'(error)\' }}</span><div class=\"help-block\" sf-message=\"form.description\"></div></div>");


    }]);

angular.module('schemaForm').config(['schemaFormDecoratorsProvider', 'sfBuilderProvider', 'sfPathProvider', 'schemaFormProvider',
    function (schemaFormDecoratorsProvider, sfBuilderProvider, sfPathProvider, schemaFormProvider) {
        var base = 'decorators/bootstrap/';
        
        
        
        
        var simpleTransclusion = sfBuilderProvider.builders.simpleTransclusion;
        var ngModelOptions = sfBuilderProvider.builders.ngModelOptions;
        var ngModel = sfBuilderProvider.builders.ngModel;
        var sfField = sfBuilderProvider.builders.sfField;
        var condition = sfBuilderProvider.builders.condition;
        var array = sfBuilderProvider.builders.array;
        
        // Tabs is so bootstrap specific that it stays here.
        var tabs = function (args) {
            if (args.form.tabs && args.form.tabs.length > 0) {
                var tabContent = args.fieldFrag.querySelector('.tab-content');
                
                args.form.tabs.forEach(function (tab, index) {
                    var div = document.createElement('div');
                    div.className = 'tab-pane';
                    div.setAttribute('ng-disabled', 'form.readonly');
                    div.setAttribute('ng-show', 'selected.tab === ' + index);
                    div.setAttribute('ng-class', '{active: selected.tab === ' + index + '}');
                    
                    var childFrag = args.build(tab.items, args.path + '.tabs[' + index + '].items', args.state);
                    div.appendChild(childFrag);
                    tabContent.appendChild(div);
                });
            }
        };
        
        
        
        var datepicker = function (name, schema, options) {
            if (schema.type === 'string' && (schema.format === 'date' || schema.format === 'date-time')) {
                var f = schemaFormProvider.stdFormObj(name, schema, options);
                f.key = options.path;
                f.type = 'datepicker';
                options.lookup[sfPathProvider.stringify(options.path)] = f;
                return f;
            }
        };
        
        schemaFormProvider.defaults.date = [];
        schemaFormProvider.defaults.date.unshift(datepicker);
        schemaFormProvider.defaults.string.unshift(datepicker);
        //Add to the bootstrap directive
        schemaFormDecoratorsProvider.addMapping(
      'bootstrapDecorator',
      'datepicker',
      'decorators/bootstrap/datepicker.html'
        );
        schemaFormDecoratorsProvider.createDirective(
      'datepicker',
      'decorators/bootstrap/datepicker.html'
        );
        
        
        
        
        var defaults = [sfField, ngModel, ngModelOptions, condition];
        schemaFormDecoratorsProvider.defineDecorator('bootstrapDecorator', {
            textarea: { template: base + 'textarea.html', builder: defaults },
            fieldset: { template: base + 'fieldset.html', builder: [sfField, simpleTransclusion, condition] },
            array: { template: base + 'array.html', builder: [sfField, ngModelOptions, ngModel, array, condition] },
            tabarray: { template: base + 'tabarray.html', builder: [sfField, ngModelOptions, ngModel, array, condition] },
            tabs: { template: base + 'tabs.html', builder: [sfField, ngModelOptions, tabs, condition] },
            section: { template: base + 'section.html', builder: [sfField, simpleTransclusion, condition] },
            conditional: { template: base + 'section.html', builder: [sfField, simpleTransclusion, condition] },
            actions: { template: base + 'actions.html', builder: defaults },
            selectObj: { template: base + 'selectObj.html', builder: defaults },
            select: { template: base + 'select.html', builder: defaults },
            ace: { template: base + 'ace.html', builder: defaults }, 
            checkbox: { template: base + 'checkbox.html', builder: defaults },
            checkboxes: { template: base + 'checkboxes.html', builder: [sfField, ngModelOptions, ngModel, array, condition] },
            number: { template: base + 'default.html', builder: defaults },
            password: { template: base + 'default.html', builder: defaults },
            submit: { template: base + 'submit.html', builder: defaults },
            button: { template: base + 'submit.html', builder: defaults },
            radios: { template: base + 'radios.html', builder: defaults },
            'radios-inline': { template: base + 'radios-inline.html', builder: defaults },
            radiobuttons: { template: base + 'radio-buttons.html', builder: defaults },
            help: { template: base + 'help.html', builder: defaults },
            datepicker: { template: base + 'datepicker.html', builder: defaults },
            grid: { template: base + 'grid.html', builder: [sfField, ngModelOptions, ngModel, array] },
            table: { template: base + 'table.html', builder: [sfField, ngModelOptions, ngModel, array] },
            
            'default': { template: base + 'default.html', builder: defaults }
        }, []);

    }]);




angular.module("schemaForm").run(["$templateCache", function (e) {
      
    }]), 

angular.module("schemaForm").config(["schemaFormProvider", "schemaFormDecoratorsProvider", "sfPathProvider",
    function (e, t, r) {
        


        var o = function (t, o, n) {
            if ("string" === o.type && "ckeditor" === o.format) {
                var a = e.stdFormObj(t, o, n); return a.key = n.path, a.type = "ckeditor", n.lookup[r.stringify(n.path)] = a, a
            }
        }; e.defaults.string.unshift(o), 
        t.addMapping("bootstrapDecorator", "ckeditor", "decorators/ckeditor/ckeditor.html"), 
        t.createDirective("ckeditor", "decorators/ckeditor/ckeditor.html")
    }]),
    
    
     function (e, t) {
    return "function" == typeof define && define.amd?void define(["angular", "ckeditor"], 
        function (e) { return t(e) }):t(e)
}(angular || null, function (e) {
    var t, r = e.module("schemaForm"), o = !1;
    return r.run(["$q", "$timeout", function (r, n) {
            function a() { "loaded" == CKEDITOR.status?(o = !0, t.resolve()):a() }
            if (t = r.defer(), e.isUndefined(CKEDITOR)) throw new Error("CKEDITOR not found"); CKEDITOR.disableAutoInline = !0, CKEDITOR.on("loaded", a), n(a, 100)
        }]), r.directive("ckeditor", ["$timeout", "$q", function (r, n) {
            "use strict"; return {
                restrict: "AC", require: ["ngModel", "^?form"], scope: !1, link: function (a, i, c, d) {
                    var s = d[0], l = d[1] || null, u = "<p></p>", f = "textarea" == i[0].tagName.toLowerCase(), m = [], p = !1; f || i.attr("contenteditable", !0); var h = function () {
                        var t = { toolbar: "full", disableNativeSpellChecker: !1, uiColor: "#FAFAFA", height: "400px", width: "100%" };
                        
                        if (CKEDITOR.instances['editarea']) {
                            CKEDITOR.remove(CKEDITOR.instances['editarea']);
                        }
                        
                        
                        if (c.ckeditor) {
                            var o = a.$eval(c.ckeditor);
                            t = e.extend(t, o)
                        }
                        
                        
                        var d = f?CKEDITOR.replace(i[0], t):CKEDITOR.inline(i[0], t), h = n.defer();
                        i.bind("$destroy", function () { d.destroy(!1) }); var v = function (e) { var t = d.getData(); "" == t && (t = null), r(function () { (e !== !0 || t != s.$viewValue) && s.$setViewValue(t), e === !0 && l && l.$setPristine() }, 0) }, k = function (e) { if (m.length) { var t = m.pop() || u; p = !1, d.setData(t, function () { v(e), p = !0 }) } };
                        d.on("change", v), d.on("blur", v), d.on("instanceReady", function () {
                            a.$broadcast("ckeditor.ready"), a.$apply(function () { k(!0) }), d.document.on("keyup", v)
                        }), d.on("customConfigLoaded", function () { h.resolve() }), s.$render = function () {
                            m.push(s.$viewValue), p && k()
                        }
                    }; "loaded" == CKEDITOR.status && (o = !0), o?h():t.promise.then(h)
                }
            }
        }]), r
});

var popups = [];

var tableControllerFunction = function (scope, $mdDialog, $uibModal, $Cache) {
    
    if (scope.modelArray === undefined)
        scope.modelArray = [];
    
    scope.dialog = function (callback) {
        
        
        $mdDialog.show(popups[popups.length - 1])
    .then(function (answer) {
            
            if (answer !== undefined) {
                callback();
                popups.pop();
                if (popups.length > 0) {
                    scope.dialog(popups[popups.length - 1]);
                }
            }
            
        }, function () {
            
            popups.pop();
            if (popups.length > 0) {
                scope.dialog(popups[popups.length - 1]);
            }

                
        });
    }
    
    scope.add = function (form) {
        var row = {};
        popups.push({
            controller: SubformController,
            templateUrl: 'modules/schemas/subform.html',
            locals: { row: row, form: form },
            parent: angular.element(document.body),
            
            clickOutsideToClose: true
        });
        scope.dialog(function () {
            if (scope.modelArray === undefined)
                scope.modelArray = [];
            scope.modelArray.push(row);
        
        });
        

         
    };
    scope.delete = function (row, form, collection, ev) {
        scope.message = "<p>Are you sure that you want to delete " + "<strong>" + "</strong> from the db?</p>";
        
        
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: "modules/schemas/confirmDialog.html",
            scope: scope,

        });
        
        modalInstance.result.then(function () {
            
            collection.splice(collection.indexOf(row), 1);
        }, function () {
             
        });
        
        scope.confirm = function () {
            modalInstance.close();
        };
        scope.cancel = function () {
            modalInstance.dismiss();
        }
        //var modalInstance = $uibModal.open({
        //    animation: scope.animationsEnabled,
        //    templateUrl: 'confirmationModal.html',
        //    controller: function() { 
    
    
        //    },
        //    size: 'sm',
        //    resolve: {
        //        items: function () {
        //            return scope.items;
        //        }
        //    }
        //});
        
        //modalInstance.result.then(function (selectedItem) {
        //    debugger         
        //    collection.splice(collection.indexOf(selectedItem), 1);
        //}, function () {
        //    $log.info('Modal dismissed at: ' + new Date());
        //});
   
    
 
    

        //var confirm = $mdDialog.confirm()
        //  .title('Continue delete?')
          
        //  .content('<div class="alert alert-danger">asdasdsad Continue delete?</div>')
        //  .ariaLabel('')
        //  .targetEvent(ev)
        //  .ok('Please do it!')
        //  .cancel('Sounds like a scam');
        //$mdDialog.show(confirm).then(function () {
        //    collection.splice(collection.indexOf(row), 1);
        //}, function () {
             
        //});
        
       
      
    };
    scope.edit = function (row, form) {
        popups.push({
            controller: SubformController,
            templateUrl: 'modules/schemas/subform.html',
            locals: { row: row, form: form },
            parent: angular.element(document.body),
            
            clickOutsideToClose: true
        });
        scope.dialog(function () { });
      
    };
    scope.deepFind = function (obj, options) {
        
        if (options.form && options.form.lookup && options.type !== "string") {
            
            
            var val = $Cache.ready(options.form.lookup, function (data) {
                if ($Cache[options.form.lookup][obj[options.field]] !== undefined && $Cache[options.form.lookup][obj[options.field]][options.form.lookupNameField] !== undefined)
                    obj[options.field + "_lookup"] = $Cache[options.form.lookup][obj[options.field]][options.form.lookupNameField];
                    
            });
            return;
        }
        
        var path = options.getter;
        if (path === undefined)
            return;
        
        
        var paths = path.split('.')
    , current = obj
    , i;
        
        for (i = 0; i < paths.length; ++i) {
            if (current[paths[i]] == undefined) {
                return undefined;
            } else {
                current = current[paths[i]];
            }
        }
        return current;
    }
    
    function SubformController($scope, $mdDialog, $resource, $compile, $timeout, row, form) {
        
        $scope.PaneHeight = $(window).height() - 300;
        window.onresize = function () {
            $scope.PaneHeight = $(window).height() - 300;
        };
        $scope.model = row;
        
        $scope.form = form;
        $scope.schema = {
            "type": "object",
            "required": [],
            "properties": form.schema
        }
        
         
        for (var i = 0; i < form.items.length; i++) {
            if (form.items[i].className && form.items[i].className !== null)
                form.items[i].htmlClass = form.items.className ;
            else
                form.items[i].htmlClass = "col-lg-6 col-md-6 col-sm-12";
            

            if (form.items[i].nameField)
                $scope.ItemName = row[form.items[i].key];
        }
        
        
        //// recursiveBuildForm($scope.schema, $scope.form);
        //$timeout(function () {
        //    $scope.$broadcast('schemaFormValidate');
        //}, 200);
        
        
        function recursiveBuildForm(schema, form) {
            
            var propCollection = schema.properties.items.properties;
            for (var key in propCollection) {
                if (!propCollection[key].edit)
                    continue;
                
                var formFragment = propCollection[key].form;
                if (formFragment === undefined)
                    formFragment = {};
                delete propCollection[key].form;
                
                formFragment.schema = JSON.parse(JSON.stringify(propCollection[key]));
                formFragment.schema.type = formFragment.schema.type.name;
                
                
                formFragment.title = propCollection[key].title;
                
                formFragment.type = formFragment.type.name;
                
                
                formFragment.key = key;
                if (formFragment.required)
                    formFragment.feedback = "{ 'glyphicon': true, 'glyphicon-asterisk': form.required && !hasSuccess() && !hasError() ,'glyphicon-ok': hasSuccess(), 'glyphicon-remove': hasError() }";
                
                
                
                //if (formFragment.nameField)
                //    $scope.nameFields.push(formFragment.key);
                if (!_.isEmpty(formFragment.lookup)) {
                    //load lookups
                    var res = $resource("/api/" + formFragment.lookup.name);
                    res.get({}, function (data) {
                        formFragment.titleMap = [];
                        formFragment.titleMap = data.items;
                    //for (var i = 0; i < data.items.length; i++) {
                    //    formFragment.titleMap.push({ value: data.items[i], name: data.items[i][formFragment.lookupNameField.key] });
                    //}
                    })
                }
                if (formFragment.enum !== undefined && formFragment.enum.length > 0) {
                    
                    var tempArr = _.map(formFragment.enum, function (item) {
                        return { name: item, value: item };
                    })
                    formFragment.titleMap = tempArr;
                }
                
                if (propCollection.items) {
                    formFragment.items = [];
                    recursiveBuildForm(propCollection.items, formFragment.items)
                }
                
                formFragment.htmlClass = "col-lg-6 col-md-6 col-sm-12 col-xs-12";
                
                form.push(formFragment);
            }

        }
        
        $scope.hide = function () {
            $mdDialog.hide();
        };
        $scope.cancel = function () {
            $mdDialog.cancel();
        };
        $scope.answer = function () {
            
            $scope.$broadcast('schemaFormValidate');
            if ($scope.SubItemForm.$valid) {
                $mdDialog.hide("ok");
            }
            
        };
    }
    
    
    
    
    scope.$watch("modelArray", function (newVal, oldVal) {
        
        
        if (newVal === undefined || newVal[0] === undefined)
            return;
        
        scope.fields = {};
        scope.columns = [];
        var fields = scope.form.schema.items.properties;
        
        for (var key in fields) {
            if (!fields[key].lobby || key === "_id")
                continue;
            
            scope.fields[key] = { type: "string" };
            
            
            
            
            if (fields[key].form && fields[key].form.lookupNameField !== undefined) {
                scope.columns.push({ type: fields[key].type.name, filter: 'text' , form: fields[key].form, field: key, getter: key + '.' + fields[key].form.lookupNameField   , headerName: fields[key].title });
                    
            } else if (fields[key].form && fields[key].form.key === "datepicker") {
                scope.columns.push({ type: fields[key].type.name, filter: 'date', headerName: fields[key].title , field: key });
            }
            else {
                scope.columns.push({ type: fields[key].type.name, filter: 'text', headerName: fields[key].title , field: key });
            }
            
            

            //if (fields[key].form && fields[key].form.lookupNameField !== undefined) {
                
            //    scope.columns.push({ filter: 'text' , valueGetter: 'data.' + key + '.' + fields[key].form.lookupNameField.key, headerName: fields[key].title });
                    
                    
                    
            //}
            //else {
            //    scope.columns.push({ filter: 'text', headerName: fields[key].title , field: key });
            //}
        }
        
        scope.columns.push({ headerName: "", templateUrl: "partials/gridTemplates/ViewAndDeleteBtns.html" });
        scope.columns.unshift({ filter: 'text', headerName: "#" , field: "_id" })
        scope.gridOptions = {
            angularCompileRows: true,
            columnDefs: scope.columns,
            rowData : scope.modelArray,
            enableFilter: true,
            enableSorting: true,
            showToolPanel: false,
            rowSelection: 'single',
            enableColResize: true,
            rowHeight: 30,
        };
    }, true)
};
// Declare a controller, this is used in the camelcaseDirective below
var GridControllerFunction = function (scope) {
    
    
    scope.$watch("modelArray", function (newVal, oldVal) {
        
        
        if (newVal === undefined || newVal[0] === undefined)
            return;
        
        scope.fields = {};
        scope.columns = [];
        var fields = scope.form.schema.items.properties;
        
        for (var key in fields) {
            if (!fields[key].lobby)
                continue;
            
            scope.fields[key] = { type: "string" };
            if (fields[key].form && fields[key].form.lookupNameField !== undefined) {
                
                scope.columns.push({ filter: 'text' , valueGetter: 'data.' + key + '.' + fields[key].form.lookupNameField.key, headerName: fields[key].title });
                    
                    
                    
            }
            else {
                scope.columns.push({ filter: 'text', headerName: fields[key].title , field: key });
            }
        }
        
        scope.columns.push({ headerName: "", templateUrl: "partials/gridTemplates/ViewAndDeleteBtns.html" });
        
        scope.gridOptions = {
            angularCompileRows: true,
            columnDefs: scope.columns,
            rowData : scope.modelArray,
            enableFilter: true,
            enableSorting: true,
            showToolPanel: false,
            rowSelection: 'single',
            enableColResize: true,
            rowHeight: 30,
        };
    }, true)
};

// Create a directive to properly access the ngModel set in the view (src/angular-schema-form-camelcase.html)
angular.module('schemaForm').directive('gridDirective', function () {
    return {
        // The directive needs the ng-model to be set, look at the <div>
        require: ['ngModel'],
        restrict: 'A',
        // Do not create a isolate scope, makeCamelCase should be available to the button element
        scope: false,
        // Define a controller, use the function from above, inject the scope
        controller : ['$scope', GridControllerFunction],
        // Use the link function to initiate the ngModel in the controller scope
        link: function (scope, iElement, iAttrs, ngModelCtrl) {
            //scope.ngModel = ngModelCtrl;
            //var unregister = scope.$watch(function () {                 
            //    return scope.ngModel.$modelValue;
            //}, initialize);
            
            //function initialize(value) {
            //    scope.ngModel.$setViewValue(value);                 
            //    unregister();
            //}
           
             
            
        }
    };
});

angular.module('schemaForm').directive('tableDirective', function ($mdDialog) {
    return {
        // The directive needs the ng-model to be set, look at the <div>
        require: ['ngModel'],
        restrict: 'A',
        // Do not create a isolate scope, makeCamelCase should be available to the button element
        scope: false,
        // Define a controller, use the function from above, inject the scope
        controller : ['$scope', '$mdDialog', '$uibModal', '$Cache', tableControllerFunction],
        // Use the link function to initiate the ngModel in the controller scope
        link: function (scope, iElement, iAttrs, ngModelCtrl) {
            //scope.ngModel = ngModelCtrl;
            //var unregister = scope.$watch(function () {                 
            //    return scope.ngModel.$modelValue;
            //}, initialize);
            
            //function initialize(value) {
            //    scope.ngModel.$setViewValue(value);                 
            //    unregister();
            //}
           
             
            
        }
    };
});







